import{y as B,r as k,z,A as P,B as A,u as O,C as E,j as I,a as F,o as M,b as S,p as j,e as H,f as R}from"./entry.a3391102.js";const T=()=>null;function K(...r){var h,_,m,v,D,w,b,g,f;const u=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(u);let[t,c,e={}]=r;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof c!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(h=e.server)!=null?h:!0,e.default=(_=e.default)!=null?_:T,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(v=(m=e.lazy)!=null?m:e.defer)!=null?v:!1,e.initialCache=(D=e.initialCache)!=null?D:!0,e.immediate=(w=e.immediate)!=null?w:!0;const a=B(),d=()=>(a.isHydrating||e.initialCache)&&a.payload.data[t]!==void 0;a._asyncData[t]||(a._asyncData[t]={data:k(d()?a.payload.data[t]:(g=(b=e.default)==null?void 0:b.call(e))!=null?g:null),pending:k(!d()),error:k((f=a.payload._errors[t])!=null?f:null)});const n={...a._asyncData[t]};n.refresh=n.execute=(i={})=>{if(a._asyncDataPromises[t]){if(i.dedupe===!1)return a._asyncDataPromises[t];a._asyncDataPromises[t].cancelled=!0}if(i._initial&&d())return a.payload.data[t];n.pending.value=!0;const o=new Promise((s,l)=>{try{s(c(a))}catch(x){l(x)}}).then(s=>{if(o.cancelled)return a._asyncDataPromises[t];e.transform&&(s=e.transform(s)),e.pick&&(s=N(s,e.pick)),n.data.value=s,n.error.value=null}).catch(s=>{var l,x;if(o.cancelled)return a._asyncDataPromises[t];n.error.value=s,n.data.value=O((x=(l=e.default)==null?void 0:l.call(e))!=null?x:null)}).finally(()=>{o.cancelled||(n.pending.value=!1,a.payload.data[t]=n.data.value,n.error.value&&(a.payload._errors[t]=!0),delete a._asyncDataPromises[t])});return a._asyncDataPromises[t]=o,a._asyncDataPromises[t]};const y=()=>n.refresh({_initial:!0}),C=e.server!==!1&&a.payload.serverRendered;{const i=E();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const s=i._nuxtOnBeforeMountCbs;i&&(z(()=>{s.forEach(l=>{l()}),s.splice(0,s.length)}),P(()=>s.splice(0,s.length)))}C&&a.isHydrating&&t in a.payload.data?n.pending.value=!1:i&&(a.payload.serverRendered&&a.isHydrating||e.lazy)&&e.immediate?i._nuxtOnBeforeMountCbs.push(y):e.immediate&&y(),e.watch&&A(e.watch,()=>n.refresh());const o=a.hook("app:data:refresh",s=>{if(!s||s.includes(t))return n.refresh()});i&&P(o)}const p=Promise.resolve(a._asyncDataPromises[t]).then(()=>n);return Object.assign(p,n),p}function N(r,u){const t={};for(const c of u)t[c]=r[c];return t}function Q(r,u,t){const[c={},e]=typeof u=="string"?[{},u]:[u,t],a=c.key||e;if(!a||typeof a!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+a);if(!r)throw new Error("[nuxt] [useFetch] request is missing.");const d="$f"+a,n=I(()=>{let o=r;return typeof o=="function"&&(o=o()),O(o)}),{server:y,lazy:C,default:p,transform:h,pick:_,watch:m,initialCache:v,immediate:D,...w}=c,b={...w,cache:typeof c.cache=="boolean"?void 0:c.cache},g={server:y,lazy:C,default:p,transform:h,pick:_,initialCache:v,immediate:D,watch:[n,...m||[]]};let f;return K(d,()=>{var o;return(o=f==null?void 0:f.abort)==null||o.call(f),f=typeof AbortController<"u"?new AbortController:{},$fetch(n.value,{signal:f.signal,...b})},g)}const $={},q=r=>(j("data-v-2da9fec0"),r=r(),H(),r),U={class:"loader"},V=q(()=>R("span",null,null,-1)),G=[V];function J(r,u){return M(),S("div",U,G)}const W=F($,[["render",J],["__scopeId","data-v-2da9fec0"]]);export{W as _,Q as u};
